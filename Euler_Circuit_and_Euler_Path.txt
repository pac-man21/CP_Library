///For an euler circuit to exist in a graph  , the necessary and sufficient condition is that all nodes of graph must be of even degree and 
/// it should be a connected graph , vertices with degree zero can be disconnected
///For and euler path 0  or 2 vertices can have an odd degree , just add the edge between the two and find the euler circuit and remove the edge from the path
multiset <int> graph[200005];
int n ;
vector <int> res;
bool bad = false;
bool vis[200005];
void dfs(int n ){
    vis[n] = 1;
    multiset <int> :: iterator it;
    for(it = graph[n].begin() ; it!= graph[n].end();it++  ){
        if(vis[*it ] ){continue;}
        dfs(*it );
    }
}
void euler_path(){
    //cout<<n<<endl;
    int v1 = -1, v2 = -1;
    for (int i = 1; i <= n; ++i) {
        //cout<<i<<endl;
        if (graph[i].size()%2== 1) {
            if (v1 == -1){
                v1 = i;
            }
            else if (v2 == -1){
                v2 = i;
            }
            else{
                bad = true;
                return;
            }
        }
    }
    //cout<<"hii"<<endl;
    if(v1>0){
        graph[v1].insert(v2);
        graph[v2].insert(v1);
    }
    //cout<<v1<<" "<<v2<<endl;
    int first = 0;
    for(int i = 1;i<= n;i++){
        if(graph[i].size() ){
            first = i;break;
        }
    }
    //cout<<first<<endl;
    if(first == 0){
        bad = true;return ;
    }
    //cout<<first<<endl;
    stack <int> st;
    st.push(first);
    while (!st.empty()) {
        int v = st.top();
        //cout<<v<<endl;
        if (graph[v].size() == 0 ) {
            res.push_back(v);
            st.pop();
        }
        else{
            int i = (*graph[v].begin());
            graph[v].erase(graph[v].find(i) );
            graph[i].erase(graph[i].find(v) );
            st.push(i);
        }
    }
    /*for(int i = 0;i<res.size();i++){
        cout<<res[i]<<" ";
    }
    cout<<""<<endl;*/
    if (v1 != -1) {
        for (int i = 0; i + 1 < res.size(); ++i) {
            if ((res[i] == v1 && res[i + 1] == v2) ||(res[i] == v2 && res[i + 1] == v1)) {
                vector<int> res2;
                for (size_t j = i + 1; j < res.size(); ++j)
                    res2.push_back(res[j]);
                for (size_t j = 1; j <= i; ++j)
                    res2.push_back(res[j]);
                res = res2;
                break;
            }
        }
    }
}